library(openxlsx)
list.files("./data")
subtlexus <- read.xlsx("./data/SUBTLEX-US frequency list with PoS and Zipf information.xlsx",
sheet = 1)
nouns <- subtlexus[ which(subtlexus$Dom_PoS_SUBTLEX == "Noun" &
subtlexus$All_PoS_SUBTLEX == "Noun"), ]
verbs <- subtlexus[which(subtlexus$Dom_PoS_SUBTLEX == "Verb" &
subtlexus$All_PoS_SUBTLEX == "Verb"), ]
nounsandverbs <- rbind(nouns, verbs)
write.csv(nounsandverbs, file = "subtlexus_nounsandverbs.csv")
goodnounsandverbs <- subset(nounsandverbs, nchar(Word) >= 3 & nchar(Word) <= 10)
write.csv(goodnounsandverbs, file = "subtlexus_nounsandverbs_3-10chars.csv")
list.files("./")
numsylls <- read.delim("./n-watch_numsylls.txt")
numsylls <- read.delim("./n-watch_numsylls.txt")
numsylls <- numsylls[1:29959, ] # remove last empty row
goodnounsandverbs <- cbind(goodnounsandverbs, syllables = numsylls$LEN_S)
goodnounsandverbs$syllables <- as.character(goodnounsandverbs$syllables)
goodnounsandverbs$syllables <- as.numeric(goodnounsandverbs$syllables)
cmudict <- read.delim("./cmudict-edited.txt", header = FALSE)
cmudict <- read.delim("./cmudict-edited.txt", header = FALSE)
cmudictsep <- cmudict %>% separate(V1, into = c("word", "pronunciation"),
sep = " ", extra = "merge", fill = "right")
write.csv(cmudictsep, file = "cmudict.csv")
library(tidyr)
cmudictsep <- cmudict %>% separate(V1, into = c("word", "pronunciation"),
sep = " ", extra = "merge", fill = "right")
write.csv(cmudictsep, file = "cmudict.csv")
cmudict <- cmudictsep # moves separated data to old name
cmudict[, "syllables"] <- NA # add a syllables column
for (i in 1:length(cmudict$pronunciation)) {
# count number of digits in CMU pronunciation (digits = syllables)
syllnum <- as.numeric(length(unlist(regmatches(cmudict$pronunciation[i],
gregexpr("[0-9]",
cmudict$pronunciation[i])))))
# write number of syllables into cmudict
cmudict$syllables[i] <- syllnum
}
View(cmudict)
cmudict$word <- tolower(cmudict$word)
write.csv(cmudict, file = "cmudict_syllables.csv") # write file to csv
goodnounsandverbs[, "cmu_syllss"] <- NA
for (i in 1:5)) {
for (j in 1:length(cmudict$word)) {
if (goodnounsandverbs$Word[i] == cmudict$word[j]) {
syllnum <- cmudict$syllables[j]
goodnounsandverbs$cmu_syllss[i] <- syllnum
break
}
}
}
for (i in 1:5) {
for (j in 1:length(cmudict$word)) {
if (goodnounsandverbs$Word[i] == cmudict$word[j]) {
syllnum <- cmudict$syllables[j]
goodnounsandverbs$cmu_syllss[i] <- syllnum
break
}
}
}
View(goodnounsandverbs)
for (i in 1:10) {
for (j in 1:length(cmudict$word)) {
if (goodnounsandverbs$Word[i] == cmudict$word[j]) {
syllnum <- cmudict$syllables[j]
goodnounsandverbs$cmu_syllss[i] <- syllnum
break
}
}
}
View(goodnounsandverbs)
View(cmudict)
for (i in 1:10) {
for (j in 1:length(cmudict$word)) {
if (goodnounsandverbs$Word[i] == cmudict$word[j]) {
syllnum <- cmudict$syllables[j]
goodnounsandverbs$cmu_syllss[i] <- syllnum
break
}
}
}
a <- c(c(a,b,c),c(1,2,3))
a <- data.frame(c(a,b,c),c(1,2,3))
w = 2
a = c(c("a","b","c"),c(1,2,3))
a
b = as.data.frame(c("a","b","c"),c(1,2,3))
b <- data.frame(word = c("a", "b", "c"), index = c(1, 2, 3))
View(b)
match("c",b)
match("c",b$word)
letters <- c("a","b","c")
fletter = c
indx <- match(fletter,letters)
fletter = "c"
indx <- match(fletter,letters)
indx
letters <- c("a","b","c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")
117905)
indices <- c(1, 7236. 16918, 27611, 35349, 40052, 45296, 51003, 57445, 60833,
62502, 66658, 72166, 81695, 84900, 87882, 96128, 96584, 103912,
117905)
indices <- c(1, 7236. 16918, 27611, 35349, 40052, 45296, 51003, 57445, 60833,
62502, 66658, 72166, 81695, 84900, 87882, 96128, 96584, 103912,
117905)
indices <- c(1, 7236, 16918, 27611, 35349, 40052, 45296, 51003, 57445, 60833,
62502, 66658, 72166, 81695, 84900, 87882, 96128, 96584, 103912,
117905)
indices <- c(1, 7236, 16918, 27611, 35349, 40052, 45296, 51003, 57445, 60833,
62502, 66658, 72166, 81695, 84900, 87882, 96128, 96584, 103912,
117905, 123540, 125340, 127670, 132056, 132135, 132863)
for (i in 1:10) {
# look at first letter
fletter <- substring(goodnounsandverbs$Word[i], 1, 1)
# find position in the alphabet of first letter
indx <- match(fletter,letters)
# this is going to be the index at which to start
jstart <- indices[indx]
# loop over dict
for (j in jstart:length(cmudict$word)) {
if (goodnounsandverbs$Word[i] == cmudict$word[j]) {
syllnum <- cmudict$syllables[j]
goodnounsandverbs$cmu_syllss[i] <- syllnum
break
}
}
}
for (i in 1:length(goodnounsandverbs$Word)) {
# look at first letter
fletter <- substring(goodnounsandverbs$Word[i], 1, 1)
# find position in the alphabet of first letter
indx <- match(fletter,letters)
# this is going to be the index at which to start
jstart <- indices[indx]
# loop over dict
for (j in jstart:length(cmudict$word)) {
if (goodnounsandverbs$Word[i] == cmudict$word[j]) {
syllnum <- cmudict$syllables[j]
goodnounsandverbs$cmu_syllss[i] <- syllnum
break
}
}
}
i = 2
print(i/29959*100)
print(100*i/29959)
for (i in 1:length(goodnounsandverbs$Word)) {
print(100*i/29959*100)
# look at first letter
fletter <- substring(goodnounsandverbs$Word[i], 1, 1)
# find position in the alphabet of first letter
indx <- match(fletter,letters)
# this is going to be the index at which to start
jstart <- indices[indx]
# loop over dict
for (j in jstart:length(cmudict$word)) {
if (goodnounsandverbs$Word[i] == cmudict$word[j]) {
syllnum <- cmudict$syllables[j]
goodnounsandverbs$cmu_syllss[i] <- syllnum
break
}
}
}
for (i in 1:length(goodnounsandverbs$Word)) {
print(i)
# look at first letter
fletter <- substring(goodnounsandverbs$Word[i], 1, 1)
# find position in the alphabet of first letter
indx <- match(fletter,letters)
# this is going to be the index at which to start
jstart <- indices[indx]
# loop over dict
for (j in jstart:length(cmudict$word)) {
if (goodnounsandverbs$Word[i] == cmudict$word[j]) {
syllnum <- cmudict$syllables[j]
goodnounsandverbs$cmu_syllss[i] <- syllnum
break
}
}
}
write.csv(goodnounsandverbs, file = "goodwords_cmusyllables.csv") # write file
? match
match(fletter,letters)
